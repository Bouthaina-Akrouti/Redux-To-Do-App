{"version":3,"sources":["ToDo.js","action/itemsAction.js","action/Types.js","App.js","serviceWorker.js","reducer/ItemsReducer.js","reducer/index.js","Store/store.js","index.js"],"names":["ToDo","props","handleChange","e","setState","saisi","target","value","add","newItem","state","id","Math","round","random","completed","className","type","placeholder","onChange","this","onClick","Component","connect","dispatch","x","payload","items","item","delete","deleteItem","complete","completeItem","map","key","style","display","alignItems","src","textDecoration","Boolean","window","location","hostname","match","initialstate","ItemsReducer","action","filter","el","combineReducers","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0hBAOMA,E,YACF,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAMVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SARlB,EAUlBC,IAAM,WACF,EAAKP,MAAMQ,Q,yVAAX,IAAuB,EAAKC,MAA5B,CAAmCC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkBC,WAAW,MATpF,EAAKL,MAAM,CACPL,MAAO,IAHG,E,sEAed,OACI,yBAAKW,UAAU,OACX,wBAAIA,UAAU,SAAd,aACA,wBAAIA,UAAU,OAAM,kDACpB,2BAAOC,KAAK,OAAOD,UAAU,QAAQE,YAAY,iBAAiBC,SAAUC,KAAKlB,eACjF,4BAAQc,UAAU,UAAUK,QAASD,KAAKZ,KAA1C,Y,GArBGc,aAiCJC,cAAQ,MANI,SAAAC,GACvB,MAAM,CACFf,QAAS,SAAAgB,GAAC,OAAID,EChCX,CACHP,KCLgB,WDMhBS,QD8B+BD,QAIxBF,CAAkCvB,GGTjD,IAYeuB,eALS,SAAAb,GACtB,MAAO,CACLiB,MAAOjB,EAAMkB,SATU,SAAAJ,GACzB,MAAO,CACLK,OAAQ,SAAAlB,GAAE,OAAIa,EFxBQ,SAAAb,GACtB,MAAO,CACHM,KCVmB,cDWnBS,QAASf,GEqBUmB,CAAWnB,KAClCoB,SAAU,SAAApB,GAAE,OAAIa,EFnBQ,SAAAb,GACxB,MAAM,CACFM,KCfsB,iBDgBtBS,QAASf,GEgBYqB,CAAarB,QAS3BY,EApCf,SAAatB,GACX,OAEI,yBAAKe,UAAU,OACb,kBAAC,EAAD,MACCf,EAAM0B,MAAMM,KAAI,SAAAL,GAAI,OACnB,yBAAKM,IAAKN,EAAKjB,GAAIwB,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAAYrB,UAAU,SAC5E,4BAAQK,QAAS,kBAAMpB,EAAM8B,SAASH,EAAKjB,KAAKK,UAAU,gBAAgBY,EAAKb,UAAY,OAAS,aAEpG,yBAAKC,UAAU,MAAMsB,IAAI,sDAAsDjB,QAAS,kBAAMpB,EAAM4B,OAAOD,EAAKjB,OAEjH,wBACEwB,MAAO,CAAEI,eAAgBX,EAAKb,UAAY,eAAiB,QAC3DC,UAAU,QAETY,EAAKvB,eCVAmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4kBCfN,IAAIC,EAAe,GAsBJC,EAnBM,WAAmC,IAAlCpC,EAAiC,uDAAzBmC,EAAcE,EAAW,uCACnD,OAAQA,EAAO9B,MACX,IHRgB,WGSZ,MAAM,GAAN,mBACOP,GADP,CAEIqC,EAAOrB,UAGf,IHbmB,cGef,OAAOhB,EAAMsC,QAAO,SAAAC,GAAE,OAAIA,EAAGtC,KAAOoC,EAAOrB,WAC/C,IHfsB,iBGgBlB,OAAOhB,EAAMuB,KAAI,SAAAgB,GAAE,OAAIA,EAAGtC,KAAOoC,EAAOrB,QAAjB,KAAgCuB,EAAhC,CAAoClC,WAAYkC,EAAGlC,YAAckC,KAE5F,QACI,OAAOvC,IClBJwC,cAAiB,CAACtB,KAAKkB,ICCvBK,cAAYC,EAAcX,OAAOY,8BAAgCZ,OAAOY,gCCKvFC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAAC,EAAD,OACSC,SAASC,eAAe,SJqHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5d6deff3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from './action/itemsAction'\r\n\r\n\r\n\r\nclass ToDo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            saisi: ''\r\n        }\r\n\r\n    }\r\n    handleChange = e => {\r\n        this.setState({ saisi: e.target.value });\r\n    }\r\n    add = () => {\r\n        this.props.newItem({...this.state, id: Math.round(Math.random() * 1000), completed: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"nav\">\r\n                <h1 className=\"title\">TO-DO-APP</h1>\r\n                <h6 className=\"add\"><strong>Add New To-Do</strong></h6>\r\n                <input type=\"text\" className=\"input\" placeholder=\"Enter new item\" onChange={this.handleChange}></input>\r\n                <button className=\"btn-add\" onClick={this.add}>Add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        newItem: x => dispatch(addItem(x))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ToDo)\r\n","import { ADD_ITEM, DELETE_ITEM, COMPLETED_ITEM} from './Types'\r\n\r\n\r\nexport const addItem = item => {\r\n    return {\r\n        type: ADD_ITEM,\r\n        payload: item\r\n    }\r\n}\r\nexport const deleteItem = id => {\r\n    return {\r\n        type: DELETE_ITEM,\r\n        payload: id\r\n    }\r\n}\r\nexport const completeItem = id => {\r\n    return{\r\n        type: COMPLETED_ITEM,\r\n        payload: id\r\n    }\r\n}","export const ADD_ITEM = 'ADD_ITEM'\r\nexport const DELETE_ITEM = 'DELETE_ITEM'\r\nexport const COMPLETED_ITEM = 'COMPLETED_ITEM'","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport ToDo from \"./ToDo\";\nimport { deleteItem, completeItem } from \"./action/itemsAction\";\n\nfunction App(props) {\n  return (\n    \n      <div className=\"App\">\n        <ToDo />\n        {props.items.map(item => (\n          <div key={item.id} style={{ display: \"flex\", alignItems: \"center\" }} className=\"items\">\n             <button onClick={() => props.complete(item.id)} className=\"btn-complete\">{item.completed ? \"UNDO\" : \"COMPLETED\"}</button>\n             {/* <button onClick={() => props.delete(item.id)} className=\"btn-delete\">DELETE</button> */}\n             <img className=\"img\" src=\"https://img.icons8.com/material/50/000000/trash.png\" onClick={() => props.delete(item.id)}></img>\n           \n            <h2\n              style={{ textDecoration: item.completed ? \"line-through\" : \"none\" }}\n              className=\"item\"\n            >\n              {item.saisi}\n            </h2>\n           \n          </div>\n        ))}\n      </div>\n    \n  );\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    delete: id => dispatch(deleteItem(id)),\n    complete: id => dispatch(completeItem(id))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    items: state.item\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_ITEM, DELETE_ITEM, COMPLETED_ITEM } from '../action/Types'\r\n\r\n\r\nlet initialstate = []\r\n\r\n\r\nconst ItemsReducer = (state = initialstate, action) => {\r\n    switch (action.type) {\r\n        case ADD_ITEM:\r\n            return [\r\n                ...state,\r\n                action.payload\r\n            ]\r\n\r\n        case DELETE_ITEM:\r\n\r\n            return state.filter(el => el.id !== action.payload)\r\n        case COMPLETED_ITEM:\r\n            return state.map(el => el.id === action.payload ? { ...el, completed: !el.completed } : el)\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\nexport default ItemsReducer","import { combineReducers } from 'redux'\r\nimport ItemsReducer from './ItemsReducer'\r\n\r\nexport default combineReducers ({item:ItemsReducer})","import { createStore } from 'redux'\r\nimport rootReducer from '../reducer'\r\n\r\n\r\nexport default createStore(rootReducer,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Store/store'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}